package expertsystemgui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.Seconds;


public class Window extends javax.swing.JFrame {
    
    public PrologConnection connection;
    private LinkedHashMap<String, List<String>> QandA = new LinkedHashMap<>();
    private List<Solution> solutions = new ArrayList<>();
    private SystemStateEnum systemState;
    public Calendar calendar;
    public int calendarRows;
    private Boolean systemConsulted = false;
    
    public Window(String title) {
        super(title);
        initComponents();
        setFramePosition();
        readLastAccessFile();
        setSolutionListModel();
        setStartPanel();
    }
    
    private void setFramePosition(){        
        /*//center
        //Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        //this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2); 
        */
        
        //top-left
        this.setLocation(0,0);

        // fullscreen
        //setExtendedState(java.awt.Frame.MAXIMIZED_BOTH); 

    }
    
    private void setSolutionListModel(){
        DefaultListModel<String> listModel = new DefaultListModel<>();
        solutionsList.setModel(listModel);
    }
    
    private void readLastAccessFile() {
        try(BufferedReader bufferedReader = new BufferedReader(new FileReader(new File("lastAccess.txt")))){
            String s;
            s = bufferedReader.readLine();
            DateTime lastAccessDate = new DateTime(s);
            DateTime now = DateTime.now();
            int days = Days.daysBetween(lastAccessDate, now).getDays();
            int hours = Hours.hoursBetween(lastAccessDate, now).getHours() % 24;
            int minutes = Minutes.minutesBetween(lastAccessDate, now).getMinutes() % 60;
            int seconds = Seconds.secondsBetween(lastAccessDate, now).getSeconds() % 60;
            String message = "Ultima accesare a fost acum " +
                             (days != 0 ?(days + " zile, ") : "") +
                             (hours != 0 ? (hours + " ore, ") : "") + 
                             (minutes != 0 ? (minutes + " minute si ") : "") + 
                             (seconds+" secunde.");
            greetingMessageLabel.setText(message);
            updateLastAccessFile();
        } 
        catch (IOException ex) {
            String message = "";
            greetingMessageLabel.setText(message);
            updateLastAccessFile();
        }
        finally{
            
        }
    }
    
    private void updateLastAccessFile(){
        try (PrintWriter writer = new PrintWriter("lastAccess.txt", "UTF-8")) {
            DateTime now = DateTime.now();
            writer.println(now.toString());
        }
        catch(IOException ex){
            Logger.getLogger(MessageSender.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setStartPanel(){
        
        setFilenameWrongLabelText("");
        startLabel.setText("<html>Bine ați venit! Vă vom ajuta să găsiți conferința perfectă pentru dvs!");
        loadInfoLabel.setText("<html>Pentru a consulta sistemul expert, trebuie sa incarcati"
                + " fisierul cu reguli si fisierul care contine solutiile.</html>");
        
        switchScreen(SystemStateEnum.START);
        
    }
    
    public void setFilenameWrongLabelText(String wrongFilename){
        if(wrongFilename.equals(""))
            filenameWrongLabel.setText("");
        else
            filenameWrongLabel.setText("<html><font color=\"red\">Nu am putut găsi fișierul \""+wrongFilename+"\"!</font></html>");
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionsRadioButtonGroup = new javax.swing.ButtonGroup();
        startPanel = new javax.swing.JPanel();
        startLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        loadInfoLabel = new javax.swing.JLabel();
        rulesFilenameLabel = new javax.swing.JLabel();
        solutionsFilenameLabel = new javax.swing.JLabel();
        rulesFilenameTextField = new javax.swing.JTextField();
        solutionsFilenameTextField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        filenameWrongLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        greetingMessageLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        loadRulesButton = new javax.swing.JButton();
        backToMenuButton = new javax.swing.JButton();
        questionsPanel = new javax.swing.JPanel();
        answersPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        answersScrollPane = new javax.swing.JScrollPane();
        answersTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        questionsRadioButtonPanel = new javax.swing.JPanel();
        answersInfoTextPanel = new javax.swing.JPanel();
        answersInfoTextLabel = new javax.swing.JLabel();
        questionPanel = new javax.swing.JPanel();
        questionTextPanel = new javax.swing.JPanel();
        questionLabel = new javax.swing.JLabel();
        optionsPanel = new javax.swing.JPanel();
        certaintyFactorPanel = new javax.swing.JPanel();
        certaintyFactorLabel = new javax.swing.JLabel();
        certaintyFactorComboBox = new javax.swing.JComboBox<>();
        outputAreaPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        factsPanel = new javax.swing.JPanel();
        factsScrollPane = new javax.swing.JScrollPane();
        factsTextArea = new javax.swing.JTextArea();
        factsInfoPanel = new javax.swing.JPanel();
        factsInfoLabel = new javax.swing.JLabel();
        calendarPanel = new javax.swing.JPanel();
        calendarScrollPane = new javax.swing.JScrollPane();
        calendarTable = new javax.swing.JTable();
        commandPanel = new javax.swing.JPanel();
        consultButton = new javax.swing.JButton();
        resetSystemButton = new javax.swing.JButton();
        backToStartPanelButton = new javax.swing.JButton();
        showFactsButton = new javax.swing.JButton();
        showAnswersButton = new javax.swing.JButton();
        showSolutionsButton = new javax.swing.JButton();
        showCalendarButton = new javax.swing.JButton();
        solutionsPanel = new javax.swing.JPanel();
        solutionsScrollPane = new javax.swing.JScrollPane();
        solutionsList = new javax.swing.JList<>();
        proofScrollPane = new javax.swing.JScrollPane();
        proofTextPane = new javax.swing.JTextPane();
        solutionsInfoPanel = new javax.swing.JPanel();
        solutionsInfoLabel = new javax.swing.JLabel();
        solutionDescriptionPanel = new javax.swing.JPanel();
        solutionDescriptionScrollPane = new javax.swing.JScrollPane();
        solutionDescriptionTextArea = new javax.swing.JTextArea();
        solutionImagePanel = new javax.swing.JPanel();
        solutionImageLabel = new javax.swing.JLabel();

        startLabel.setText("Start label");

        loadInfoLabel.setText("LoadInfo");

        rulesFilenameLabel.setText("Nume fișier reguli:");

        solutionsFilenameLabel.setText("Nume fișier soluții:");

        rulesFilenameTextField.setText("Rules.txt");

        solutionsFilenameTextField.setText("SolutionInfo.txt");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addComponent(loadInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(solutionsFilenameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rulesFilenameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(solutionsFilenameTextField)
                    .addComponent(rulesFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rulesFilenameLabel)
                            .addComponent(rulesFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(solutionsFilenameLabel)
                            .addComponent(solutionsFilenameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(loadInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );

        filenameWrongLabel.setText("wrong file name");
        jPanel2.add(filenameWrongLabel);

        greetingMessageLabel.setText("Mesaj de bun venit");
        jPanel3.add(greetingMessageLabel);

        loadRulesButton.setText("Încarcă");
        loadRulesButton.setPreferredSize(new java.awt.Dimension(250, 30));
        loadRulesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadRulesButtonActionPerformed(evt);
            }
        });
        jPanel4.add(loadRulesButton);

        javax.swing.GroupLayout startPanelLayout = new javax.swing.GroupLayout(startPanel);
        startPanel.setLayout(startPanelLayout);
        startPanelLayout.setHorizontalGroup(
            startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(startPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(startLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        startPanelLayout.setVerticalGroup(
            startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(startLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        backToMenuButton.setText("Back to menu");
        backToMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenuButtonActionPerformed(evt);
            }
        });

        answersPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        answersPanel.setPreferredSize(new java.awt.Dimension(291, 210));

        jPanel8.setPreferredSize(new java.awt.Dimension(400, 216));

        answersScrollPane.setBorder(null);

        answersTextArea.setVisible(false);
        answersTextArea.setColumns(20);
        answersTextArea.setLineWrap(true);
        answersTextArea.setRows(5);
        answersTextArea.setWrapStyleWord(true);
        answersTextArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(133, 134, 136)));
        answersTextArea.setPreferredSize(new java.awt.Dimension(166, 96));
        answersScrollPane.setViewportView(answersTextArea);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(answersScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(answersScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        jScrollPane2.setBorder(null);

        questionsRadioButtonPanel.setLayout(new javax.swing.BoxLayout(questionsRadioButtonPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane2.setViewportView(questionsRadioButtonPanel);

        answersInfoTextLabel.setText("Aici veți putea vedea atributele pentru care ați răspuns, cu întrebarea și răspunsul corespunzător fiecărui atribut");
        answersInfoTextPanel.add(answersInfoTextLabel);

        javax.swing.GroupLayout answersPanelLayout = new javax.swing.GroupLayout(answersPanel);
        answersPanel.setLayout(answersPanelLayout);
        answersPanelLayout.setHorizontalGroup(
            answersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, answersPanelLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(answersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(answersInfoTextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        answersPanelLayout.setVerticalGroup(
            answersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(answersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(answersInfoTextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(answersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(answersPanelLayout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        questionPanel.setVisible(false);

        questionLabel.setText("Question");
        questionTextPanel.add(questionLabel);

        javax.swing.GroupLayout optionsPanelLayout = new javax.swing.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        certaintyFactorLabel.setText("Factor de certitudine");
        certaintyFactorPanel.add(certaintyFactorLabel);

        certaintyFactorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "100", "95", "90", "85", "80", "75", "70", "65", "60", "55", "50", "45", "40", "35", "30", "25", "20", "10", "5", "0" }));
        certaintyFactorPanel.add(certaintyFactorComboBox);

        javax.swing.GroupLayout questionPanelLayout = new javax.swing.GroupLayout(questionPanel);
        questionPanel.setLayout(questionPanelLayout);
        questionPanelLayout.setHorizontalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(questionTextPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(certaintyFactorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        questionPanelLayout.setVerticalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionPanelLayout.createSequentialGroup()
                .addComponent(questionTextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(certaintyFactorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout questionsPanelLayout = new javax.swing.GroupLayout(questionsPanel);
        questionsPanel.setLayout(questionsPanelLayout);
        questionsPanelLayout.setHorizontalGroup(
            questionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(questionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(answersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
                .addContainerGap())
        );
        questionsPanelLayout.setVerticalGroup(
            questionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, questionsPanelLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(questionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(answersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        outputTextArea.setColumns(20);
        outputTextArea.setLineWrap(true);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        javax.swing.GroupLayout outputAreaPanelLayout = new javax.swing.GroupLayout(outputAreaPanel);
        outputAreaPanel.setLayout(outputAreaPanelLayout);
        outputAreaPanelLayout.setHorizontalGroup(
            outputAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputAreaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                .addContainerGap())
        );
        outputAreaPanelLayout.setVerticalGroup(
            outputAreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputAreaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                .addContainerGap())
        );

        factsTextArea.setColumns(20);
        factsTextArea.setRows(5);
        factsTextArea.setWrapStyleWord(true);
        factsScrollPane.setViewportView(factsTextArea);

        factsInfoLabel.setText("Aici puteți vedea toate faptele care există în baza de cunoștințe");
        factsInfoPanel.add(factsInfoLabel);

        javax.swing.GroupLayout factsPanelLayout = new javax.swing.GroupLayout(factsPanel);
        factsPanel.setLayout(factsPanelLayout);
        factsPanelLayout.setHorizontalGroup(
            factsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(factsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(factsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(factsInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, factsPanelLayout.createSequentialGroup()
                        .addGap(0, 118, Short.MAX_VALUE)
                        .addComponent(factsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 103, Short.MAX_VALUE)))
                .addContainerGap())
        );
        factsPanelLayout.setVerticalGroup(
            factsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(factsPanelLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(factsInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(factsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        calendarTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        calendarTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        calendarTable.setFillsViewportHeight(true);
        calendarScrollPane.setViewportView(calendarTable);

        javax.swing.GroupLayout calendarPanelLayout = new javax.swing.GroupLayout(calendarPanel);
        calendarPanel.setLayout(calendarPanelLayout);
        calendarPanelLayout.setHorizontalGroup(
            calendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calendarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(calendarScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                .addContainerGap())
        );
        calendarPanelLayout.setVerticalGroup(
            calendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calendarPanelLayout.createSequentialGroup()
                .addComponent(calendarScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(900, 700));

        commandPanel.setPreferredSize(new java.awt.Dimension(800, 35));

        consultButton.setText("Consultă ");
        consultButton.setPreferredSize(new java.awt.Dimension(120, 25));
        consultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultButtonActionPerformed(evt);
            }
        });
        commandPanel.add(consultButton);

        resetSystemButton.setText("Reinițiază");
        resetSystemButton.setPreferredSize(new java.awt.Dimension(120, 25));
        resetSystemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSystemButtonActionPerformed(evt);
            }
        });
        commandPanel.add(resetSystemButton);

        backToStartPanelButton.setText("Reset");
        backToStartPanelButton.setPreferredSize(new java.awt.Dimension(80, 25));
        backToStartPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToStartPanelButtonActionPerformed(evt);
            }
        });
        commandPanel.add(backToStartPanelButton);

        showFactsButton.setText("Afișare fapte");
        showFactsButton.setPreferredSize(new java.awt.Dimension(120, 25));
        showFactsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFactsButtonActionPerformed(evt);
            }
        });
        commandPanel.add(showFactsButton);

        showAnswersButton.setText("Răspunsuri");
        showAnswersButton.setPreferredSize(new java.awt.Dimension(100, 25));
        showAnswersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAnswersButtonActionPerformed(evt);
            }
        });
        commandPanel.add(showAnswersButton);

        showSolutionsButton.setText("Afișare soluții");
        showSolutionsButton.setPreferredSize(new java.awt.Dimension(120, 25));
        showSolutionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSolutionsButtonActionPerformed(evt);
            }
        });
        commandPanel.add(showSolutionsButton);

        showCalendarButton.setText("Calendar");
        showCalendarButton.setPreferredSize(new java.awt.Dimension(90, 25));
        showCalendarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCalendarButtonActionPerformed(evt);
            }
        });
        commandPanel.add(showCalendarButton);

        getContentPane().add(commandPanel, java.awt.BorderLayout.NORTH);

        solutionsScrollPane.setVisible(false);
        solutionsScrollPane.setPreferredSize(new java.awt.Dimension(350, 100));

        solutionsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        solutionsList.setSelectedIndex(0);
        solutionsList.setVisibleRowCount(-1);
        solutionsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                solutionsListValueChanged(evt);
            }
        });
        solutionsScrollPane.setViewportView(solutionsList);

        proofScrollPane.setVisible(false);
        proofScrollPane.setPreferredSize(new java.awt.Dimension(350, 22));
        proofScrollPane.setViewportView(proofTextPane);

        solutionsInfoLabel.setText("solution info");
        solutionsInfoPanel.add(solutionsInfoLabel);

        solutionDescriptionPanel.setVisible(false);

        solutionDescriptionScrollPane.setBackground(new java.awt.Color(238, 238, 238));
        solutionDescriptionScrollPane.setBorder(null);

        solutionDescriptionTextArea.setBackground(new java.awt.Color(238, 238, 238));
        solutionDescriptionTextArea.setColumns(20);
        solutionDescriptionTextArea.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        solutionDescriptionTextArea.setLineWrap(true);
        solutionDescriptionTextArea.setRows(5);
        solutionDescriptionTextArea.setWrapStyleWord(true);
        solutionDescriptionTextArea.setBorder(null);
        solutionDescriptionTextArea.setMinimumSize(new java.awt.Dimension(4, 4));
        solutionDescriptionScrollPane.setViewportView(solutionDescriptionTextArea);

        javax.swing.GroupLayout solutionImagePanelLayout = new javax.swing.GroupLayout(solutionImagePanel);
        solutionImagePanel.setLayout(solutionImagePanelLayout);
        solutionImagePanelLayout.setHorizontalGroup(
            solutionImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(solutionImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
        );
        solutionImagePanelLayout.setVerticalGroup(
            solutionImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(solutionImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout solutionDescriptionPanelLayout = new javax.swing.GroupLayout(solutionDescriptionPanel);
        solutionDescriptionPanel.setLayout(solutionDescriptionPanelLayout);
        solutionDescriptionPanelLayout.setHorizontalGroup(
            solutionDescriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solutionDescriptionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(solutionDescriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solutionImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        solutionDescriptionPanelLayout.setVerticalGroup(
            solutionDescriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solutionDescriptionPanelLayout.createSequentialGroup()
                .addGroup(solutionDescriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(solutionDescriptionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(solutionImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(solutionDescriptionPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(solutionDescriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout solutionsPanelLayout = new javax.swing.GroupLayout(solutionsPanel);
        solutionsPanel.setLayout(solutionsPanelLayout);
        solutionsPanelLayout.setHorizontalGroup(
            solutionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solutionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(solutionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(solutionsInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(solutionsPanelLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(solutionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(proofScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                        .addGap(40, 40, 40))))
            .addGroup(solutionsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(solutionDescriptionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        solutionsPanelLayout.setVerticalGroup(
            solutionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, solutionsPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(solutionsInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(solutionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(solutionsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(proofScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(solutionDescriptionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(solutionsPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultButtonActionPerformed
        
        try {
            connection.messageSender.sendMessageToExpertSystem("command(consult)");
        
        } catch (InterruptedException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        consultButton.setEnabled(false);
        showFactsButton.setVisible(false);
        showAnswersButton.setVisible(false);
        showSolutionsButton.setVisible(false);
        showCalendarButton.setVisible(false);
        answersInfoTextLabel.setText("Aici veți putea vedea atributele pentru care ați răspuns, cu întrebarea și răspunsul corespunzător fiecărui atribut");
        optionsPanel.setVisible(true);
        questionPanel.setVisible(true);
        
        switchScreen(SystemStateEnum.CONSULTING);
    }//GEN-LAST:event_consultButtonActionPerformed

    private void backToMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenuButtonActionPerformed
        // TODO add your handling code here:
        //switchToMenuView();
    }//GEN-LAST:event_backToMenuButtonActionPerformed

    private void resetSystemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSystemButtonActionPerformed
        // TODO add your handling code here:    
        
        resetSystem();
        switchScreen(SystemStateEnum.MAIN_MENU);
    }//GEN-LAST:event_resetSystemButtonActionPerformed

    private void resetSystem(){
        try {
            connection.messageSender.sendMessageToExpertSystem("command(reset)");
        
        } catch (InterruptedException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        systemConsulted = false;
        consultButton.setEnabled(true);
        questionsRadioButtonPanel.removeAll();
        proofTextPane.setText("");
        answersTextArea.setVisible(false);
        questionLabel.setText("");
        optionsPanel.removeAll();
        solutionsScrollPane.setVisible(false);
        solutionDescriptionPanel.setVisible(false);
        proofScrollPane.setVisible(false);
        showSolutionsButton.setVisible(true);
        showAnswersButton.setVisible(true);
        showFactsButton.setVisible(true);
        showCalendarButton.setVisible(true);
        
        DefaultListModel listModel = (DefaultListModel) solutionsList.getModel();
        listModel.removeAllElements();
        
        solutions.clear();
        QandA.clear();
    }
    
    private void solutionsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_solutionsListValueChanged
        // TODO add your handling code here:
        if (evt.getValueIsAdjusting() == false) {
            
            int index = solutionsList.getSelectedIndex();
            if (index == -1)
                return;
            
            String selectedSolutionString = solutionsList.getSelectedValue();
            Solution selectedSolution = null;
            for(Solution solution : solutions)
                if(solution.toString().equals(selectedSolutionString))
                    selectedSolution = solution;
            
            if(selectedSolution == null)
                return;
            
            getProofForSolution(selectedSolution);
            addDescription(selectedSolution);
            addImageToPanel(selectedSolution);
        }
    }//GEN-LAST:event_solutionsListValueChanged

    private void loadRulesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadRulesButtonActionPerformed
        String rulesFilename = rulesFilenameTextField.getText();
        String solutionsFilename = solutionsFilenameTextField.getText();
        consultButton.setEnabled(true);
        resetSystemButton.setEnabled(true);
        String dir = System.getProperty("user.dir");
        dir=dir.replace("\\", "/");
            try {
                connection.messageSender.sendMessageToExpertSystem("set_current_directory('"+dir+"')");
                connection.messageSender.sendMessageToExpertSystem("load('"+rulesFilename+"','"+solutionsFilename+"')");

            } catch (InterruptedException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }

    }//GEN-LAST:event_loadRulesButtonActionPerformed

    private void showFactsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFactsButtonActionPerformed
        // TODO add your handling code here:
        try {
            connection.messageSender.sendMessageToExpertSystem("command(show_facts)");
        
        } catch (InterruptedException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        switchScreen(SystemStateEnum.SHOWING_FACTS);
    }//GEN-LAST:event_showFactsButtonActionPerformed

    private void backToStartPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToStartPanelButtonActionPerformed
        // TODO add your handling code here:
        resetSystem();
        calendar = null;
        switchScreen(SystemStateEnum.START);
    }//GEN-LAST:event_backToStartPanelButtonActionPerformed

    private void showAnswersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAnswersButtonActionPerformed
        // TODO add your handling code here:
        if(!systemConsulted)
            answersInfoTextLabel.setText("Trebuie să consultați sistemul, mai întâi, pentru a putea vedea răspunsurile");
        switchScreen(SystemStateEnum.SHOWING_ANSWERS);
    }//GEN-LAST:event_showAnswersButtonActionPerformed

    private void showSolutionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSolutionsButtonActionPerformed
        // TODO add your handling code here:
        if(!systemConsulted)
            solutionsInfoLabel.setText("Trebuie să consultați sistemul, mai întâi, pentru a putea vedea soluțiile");
        switchScreen(SystemStateEnum.SHOWING_SOLUTIONS);
    }//GEN-LAST:event_showSolutionsButtonActionPerformed

    private void showCalendarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCalendarButtonActionPerformed
        // TODO add your handling code here:
        switchScreen(SystemStateEnum.SHOWING_CALENDAR);
                
        if(calendar != null)
            return;
            
        try {
            connection.messageSender.sendMessageToExpertSystem("command(show_calendar)");
        
        } catch (InterruptedException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_showCalendarButtonActionPerformed

    public void setCalendar(String text){
        int rows = calendarRows;
        int columns = 13;
        
        text = text.substring(1, text.length()-1);
        text = text.replaceAll("\\[","").replaceAll("\\]","").replaceAll("\'","");
        text = "Domeniu" + text;
        String elements[] = text.split(",");
        
        String columnNames[] = new String[columns];
        System.arraycopy(elements, 0, columnNames, 0, columns);
        
        Object[][] data = new Object[rows-1][columns];
        for(int i=0; i < rows-1; i++)
            for(int j=0; j < columns; j++)
                data[i][j] = elements[(i+1)*columns + j];
        
        calendar = new Calendar(rows, columns, columnNames, data);
        SetCalendarTableModel();
    }
    
    private void SetCalendarTableModel(){
        TableModel tableModel = new DefaultTableModel(calendar.data, calendar.columnNames);
        calendarTable.setModel(tableModel);
        calendarTable.getColumnModel().getColumn(0).setPreferredWidth(300);
        calendarTable.revalidate();
        calendarTable.repaint();
    }
    
    public void loadingSuccessful(){
        setFilenameWrongLabelText("");
        // move to main menu screen
        switchScreen(SystemStateEnum.MAIN_MENU);
    }
    
    public void switchScreen(SystemStateEnum systemState){
        BorderLayout borderLayout = (BorderLayout) this.getContentPane().getLayout();
        Component centerComponent = borderLayout.getLayoutComponent(BorderLayout.CENTER);
        Component northComponent = borderLayout.getLayoutComponent(BorderLayout.NORTH);
        if(centerComponent != null)
            this.remove(centerComponent);
        
        switch(systemState){
            case START:
                if(northComponent != null)
                    this.remove(northComponent);
                getContentPane().add(startPanel, BorderLayout.CENTER);
                this.revalidate();
                this.repaint();
                break;
            case MAIN_MENU:
                if(northComponent == null)
                    getContentPane().add(commandPanel, BorderLayout.NORTH);
                this.revalidate();
                this.repaint();
                break;
            case CONSULTING:
                getContentPane().add(questionsPanel, BorderLayout.CENTER);
                this.revalidate();
                this.repaint();
                break;
            case SHOWING_SOLUTIONS:
                getContentPane().add(solutionsPanel, BorderLayout.CENTER);
                this.revalidate();
                this.repaint();
                break;
            case SHOWING_FACTS:
                factsTextArea.setText("");
                getContentPane().add(factsPanel, BorderLayout.CENTER);
                this.revalidate();
                this.repaint();
                break;
            case SHOWING_ANSWERS:
                getContentPane().add(questionsPanel, BorderLayout.CENTER);
                this.revalidate();
                this.repaint();
                break;
            case SHOWING_CALENDAR:
                getContentPane().add(calendarPanel, BorderLayout.CENTER);
                this.revalidate();
                this.repaint();
                break;
        }
        
        this.systemState = systemState;
    }
        
    private void getProofForSolution(Solution selectedSolution) {
        try {
            String message = selectedSolution.getGoal() + ",este," + selectedSolution.getValue();
            message = "how([" + message + "])";
            
            proofTextPane.setText("");
            connection.messageSender.sendMessageToExpertSystem(message);
            proofScrollPane.setVisible(true);
        }
        catch (InterruptedException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void addDescription(Solution selectedSolution){
        String name = selectedSolution.getValue();
        String formattedName = String.join(" ", name.split("_"));
        formattedName = formattedName.substring(0,1).toUpperCase() + formattedName.substring(1);
                
        StringBuilder text = new StringBuilder();
        text.append("Name: ").append(formattedName).append("\n");
        text.append("Date: ").append(selectedSolution.getDate().toString()).append("\n\n");
        text.append(selectedSolution.getDescription());
        solutionDescriptionTextArea.setText(text.toString());
    }
    
    private void addImageToPanel(Solution selectedSolution){
        BufferedImage image = selectedSolution.getImage();
        if(image == null)
            return;
        
        int height = solutionImagePanel.getSize().height;
        int width = solutionImagePanel.getSize().width;
        int imageHeight = image.getHeight();
        int imageWitdh = image.getWidth();
        ImageIcon imageIcon = new ImageIcon(image.getScaledInstance(width, height, BufferedImage.SCALE_SMOOTH));
        solutionImageLabel.setIcon(imageIcon);
        solutionImagePanel.revalidate();
        solutionImagePanel.repaint();
    }
    
     private void optionButtonActionPerformed(java.awt.event.ActionEvent evt) {
        
        String attributeQuestion = evt.getActionCommand();
        String[] s = attributeQuestion.split("~");
        String attribute = s[0];
        String question = s[1];
        
        if(QandA.keySet().contains(attribute))
            return;
        
        int certaintyFactor = Integer.parseInt(certaintyFactorComboBox.getSelectedItem().toString());
        String answer = ((JButton)(evt.getSource())).getText() + " fc " + certaintyFactor;
        try {
            connection.messageSender.sendStringToExpertSystem(answer);
        }
        catch (InterruptedException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        SaveQuestionAndAnswerAndAddRadioButton(attribute, question, answer);
    }

    private void SaveQuestionAndAnswerAndAddRadioButton(String attribute, String question, String answer) {
        addAtribute(attribute, question, answer);
        
        JRadioButton radioButton = new JRadioButton(attribute);
        radioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonActionPerformed(evt);
            }
        });
        questionsRadioButtonGroup.add(radioButton);
        questionsRadioButtonPanel.add(radioButton);
        questionsRadioButtonPanel.revalidate();
        questionsRadioButtonPanel.repaint();
    }
    
    public void addAtribute(String attribute, String question, String answer){
        List<String> list = Arrays.asList(question, answer);
        QandA.put(attribute, list);
    }
    
    
    private void radioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String attribute = ((JRadioButton)(evt.getSource())).getText();
        List<String> questionAndAnswer = QandA.get(attribute);
        String question = "Q: " + questionAndAnswer.get(0);
        String answer = "A: " + questionAndAnswer.get(1);
        answer = answer.endsWith("fc 100") ? answer.substring(0,answer.length()-7) : answer;
        
        answersTextArea.setText(question + "\n" + answer);
        answersTextArea.setVisible(true);
        questionsPanel.revalidate();
        questionsPanel.repaint();
    } 
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window("Verificare").setVisible(true);
                
            }
        });
    }

    public javax.swing.JTextArea getOutputTextArea(){
        return outputTextArea;
    }
    
    public void setConnection(PrologConnection connection){
        this.connection = connection;
    }
    public void setQuestionAndOptions(String question, String optionsString, String attribute){
        
        this.questionLabel.setText("<html><body style='width:100%'>"+question+"</html>");
        
        this.optionsPanel.removeAll();
        this.optionsPanel.setLayout(new WrapLayout());
        
        optionsString = optionsString.trim();
        String[] options = optionsString.split(" ");
        
        for (int i = 0; i < options.length; i++) {
            
            String iconPath = "icons/icon" + (i+1) + ".png";
            ImageIcon imageIcon = createImageIcon(iconPath);
            
            JButton optionButton = new JButton(options[i], imageIcon); 
            String s = attribute + "~" + question;
            optionButton.setActionCommand(s);
            optionButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    optionButtonActionPerformed(evt);
                }
            });
            //optionButton.setPreferredSize(new Dimension(200,40));
            this.optionsPanel.add(optionButton);
        }
        
        this.questionLabel.repaint();
        this.optionsPanel.revalidate();
        this.optionsPanel.repaint();
        
    } 

     /** Returns an ImageIcon, or null if the path was invalid. */
    private ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
     
    public void setSolution(String solutionString){
         if(solutionString.equals("done")){
             showSolutions();
             return;
         }
         
         Solution solution = parseSolutionString(solutionString);
         solutions.add(solution);
    } 
    
    private Solution parseSolutionString(String solutionString){
        String[] words = solutionString.split("#");
        String goal = words[0];
        String value = words[1];
        int certaintyFactor = Integer.parseInt(words[2]);
        String description = words[3].substring(1, words[3].length()-1);
        String domain = words[4].substring(1, words[4].length()-1);
        
        String imagePath = words[5].substring(1, words[5].length()-1);
        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(imagePath + ".png"));
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String[] date = words[6].substring("datime".length()+1, words[6].length()-1).split(",");
        int year = (int)Double.parseDouble(date[0]);
        int month = (int)Double.parseDouble(date[1]);
        int day = (int)Double.parseDouble(date[2]);
        LocalDate localDate = new LocalDate(year, month, day);
        
        return new Solution(goal, value, certaintyFactor, description, domain, image, localDate);
    }
    
    private void showSolutions(){
        
        if(!solutions.isEmpty()){
           addSolutionsToJList();
           solutionsInfoLabel.setText("Acestea sunt conferințele care vi se potrivesc!");
           solutionsScrollPane.setVisible(true);
           proofScrollPane.setVisible(true);
           solutionDescriptionPanel.setVisible(true);
        }
        else{
           solutionsInfoLabel.setText("Ne pare rău, dar nu am putut găsi o conferință potrivită pentru dvs!");
           solutionsScrollPane.setVisible(false);
           proofScrollPane.setVisible(false);
           solutionDescriptionPanel.setVisible(false);
        }

        systemConsulted = true;
        showSolutionsButton.setVisible(true);
        showAnswersButton.setVisible(true);
        showFactsButton.setVisible(true);
        showCalendarButton.setVisible(true);
        questionPanel.setVisible(false);
        
        switchScreen(SystemStateEnum.SHOWING_SOLUTIONS);
        solutionsList.setSelectedIndex(0);
    }
    
    private void addSolutionsToJList() {
        Collections.sort(solutions);
        DefaultListModel<String> listModel = new DefaultListModel<>();
        solutions.stream().forEach((s) -> {
            listModel.addElement(s.toString());
        });
        solutionsList.setModel(listModel);
    }
    
    public void setProofText(String text){
        text = text.charAt(0) == ' ' ? text : "\n"+text;
        text = text.startsWith("regula") ? "\n"+text : text;
        Document doc = proofTextPane.getDocument();
        try {
            doc.insertString(doc.getLength(), text, null);
            proofTextPane.setCaretPosition(0);
        } 
        catch (BadLocationException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void appendFactsText(String text){
        text += "\n";
        text = text.startsWith("(Atribut") ? text+"\n" : text;
        factsTextArea.append(text);
        factsTextArea.setCaretPosition(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel answersInfoTextLabel;
    private javax.swing.JPanel answersInfoTextPanel;
    private javax.swing.JPanel answersPanel;
    private javax.swing.JScrollPane answersScrollPane;
    private javax.swing.JTextArea answersTextArea;
    private javax.swing.JButton backToMenuButton;
    private javax.swing.JButton backToStartPanelButton;
    private javax.swing.JPanel calendarPanel;
    private javax.swing.JScrollPane calendarScrollPane;
    private javax.swing.JTable calendarTable;
    private javax.swing.JComboBox<String> certaintyFactorComboBox;
    private javax.swing.JLabel certaintyFactorLabel;
    private javax.swing.JPanel certaintyFactorPanel;
    private javax.swing.JPanel commandPanel;
    private javax.swing.JButton consultButton;
    private javax.swing.JLabel factsInfoLabel;
    private javax.swing.JPanel factsInfoPanel;
    private javax.swing.JPanel factsPanel;
    private javax.swing.JScrollPane factsScrollPane;
    private javax.swing.JTextArea factsTextArea;
    private javax.swing.JLabel filenameWrongLabel;
    private javax.swing.JLabel greetingMessageLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel loadInfoLabel;
    private javax.swing.JButton loadRulesButton;
    public javax.swing.JPanel optionsPanel;
    private javax.swing.JPanel outputAreaPanel;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JScrollPane proofScrollPane;
    private javax.swing.JTextPane proofTextPane;
    public javax.swing.JLabel questionLabel;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JPanel questionTextPanel;
    private javax.swing.JPanel questionsPanel;
    private javax.swing.ButtonGroup questionsRadioButtonGroup;
    private javax.swing.JPanel questionsRadioButtonPanel;
    private javax.swing.JButton resetSystemButton;
    private javax.swing.JLabel rulesFilenameLabel;
    private javax.swing.JTextField rulesFilenameTextField;
    private javax.swing.JButton showAnswersButton;
    private javax.swing.JButton showCalendarButton;
    private javax.swing.JButton showFactsButton;
    private javax.swing.JButton showSolutionsButton;
    private javax.swing.JPanel solutionDescriptionPanel;
    private javax.swing.JScrollPane solutionDescriptionScrollPane;
    private javax.swing.JTextArea solutionDescriptionTextArea;
    private javax.swing.JLabel solutionImageLabel;
    private javax.swing.JPanel solutionImagePanel;
    private javax.swing.JLabel solutionsFilenameLabel;
    private javax.swing.JTextField solutionsFilenameTextField;
    private javax.swing.JLabel solutionsInfoLabel;
    private javax.swing.JPanel solutionsInfoPanel;
    private javax.swing.JList<String> solutionsList;
    private javax.swing.JPanel solutionsPanel;
    private javax.swing.JScrollPane solutionsScrollPane;
    private javax.swing.JLabel startLabel;
    private javax.swing.JPanel startPanel;
    // End of variables declaration//GEN-END:variables

}
